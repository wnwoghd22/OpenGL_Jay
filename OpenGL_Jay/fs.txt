#version 330 core

in vec3 FragPos;
in vec3 Normal;

out vec4 FragColor;

//uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

in vec2 TexCoords;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    sampler2D emission;
    float     shininess;
}; 
  
uniform Material material;

struct Light {
    vec3 position;
    vec3 direction;
    float cutOff;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

uniform Light light;
uniform float time;

void main()
{

    vec3 lightDir = normalize(light.position - FragPos);
    //vec3 lightDir = normalize(-light.direction);
    float theta = dot(lightDir, normalize(-light.direction));

    if(theta > light.cutOff) 
    {       
        // do lighting calculations
        // ambient
        vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));
  	
        // diffuse 
        vec3 norm = normalize(Normal);
        float distance = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
        float diff = max(dot(norm, lightDir), 0.0);
        //vec3 diffuse = light.diffuse * (diff * material.diffuse);
        vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));
    
        // specular
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
        //vec3 specular = light.specular * (spec * material.specular);
        vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
        //vec3 specular = light.specular * spec * (vec3(1.0) - vec3(texture(material.specular, TexCoords)));

        //q3. Emission
        //vec3 emission =  vec3(texture(material.emission, TexCoords));
        /*Emission */
        vec3 emission = vec3(0.0);
        if (texture(material.specular, TexCoords).r == 0.0)   /*rough check for blackbox inside spec texture */
        {
            /*apply emission texture */
            emission = texture(material.emission, TexCoords).rgb;
        
            /*some extra fun stuff with "time uniform" */
            emission = texture(material.emission, TexCoords + vec2(0.0,time)).rgb;   /*moving */
            emission = emission * (sin(time) * 0.5 + 0.5) * 2.0;                     /*fading */
        }

        ambient  *= attenuation; 
        diffuse  *= attenuation;
        specular *= attenuation;
        
        //vec3 result = ambient + diffuse + specular + emission;
        vec3 result = ambient + diffuse + specular;
        
        FragColor = vec4(result, 1.0);
    }
    else  // else, use ambient light so scene isn't completely dark outside the spotlight.
        FragColor = vec4(light.ambient * vec3(texture(material.diffuse, TexCoords)), 1.0);
}